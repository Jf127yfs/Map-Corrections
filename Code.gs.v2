// Code.gs - Multi-Mode Router with Frame Support

/**
 * Main router - handles multiple access modes:
 *
 * 1. Direct Page Access (Legacy):
 *    ?page=MD                          → MapDisplay page directly
 *
 * 2. Master Mode (Frame-based navigation):
 *    ?mode=master                      → Master page with default content
 *    ?mode=master&page=MD              → Master page with map loaded
 *
 * 3. Display Mode (Auto-rotation for TV/dashboards):
 *    ?mode=display                     → Auto-rotation with default settings
 *    ?mode=display&interval=10         → 10-second intervals
 *    ?mode=display&pages=MD,dashboard  → Custom page rotation
 *
 * 4. No parameters:
 *    (default)                         → Redirects to Master mode
 */
function doGet(e) {
  const params = e.parameter || {};
  const mode = params.mode || '';
  const page = params.page || '';

  // ROUTING LOGIC

  // Mode 1: Display Mode (Auto-rotation)
  if (mode.toLowerCase() === 'display') {
    return HtmlService.createHtmlOutputFromFile('Display')
      .setTitle('Display Mode - Auto Rotation')
      .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
  }

  // Mode 2: Master Mode (Frame-based navigation)
  if (mode.toLowerCase() === 'master') {
    return HtmlService.createHtmlOutputFromFile('Master')
      .setTitle('Project Dashboard')
      .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
  }

  // Mode 3: Direct Page Access
  if (page) {
    return getPage(page);
  }

  // Mode 4: Default (no parameters) → Redirect to Master
  return HtmlService.createHtmlOutputFromFile('Master')
    .setTitle('Project Dashboard')
    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
}

/**
 * Get a specific page by name
 * @param {string} pageName - Name of the page to load
 * @returns {HtmlOutput} The page HTML output
 */
function getPage(pageName) {
  const page = pageName.toLowerCase();

  switch(page) {
    case 'md':
    case 'mapdisplay':
      return HtmlService.createHtmlOutputFromFile('MapDisplay')
        .setTitle('Zip Code Network - Map Visualization')
        .setWidth(1400)
        .setHeight(900)
        .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);

    case 'home':
    case 'index':
      return HtmlService.createHtmlOutputFromFile('Index')
        .setTitle('Home')
        .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);

    case 'dashboard':
      return HtmlService.createHtmlOutputFromFile('Dashboard')
        .setTitle('Dashboard')
        .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);

    case 'reports':
      return HtmlService.createHtmlOutputFromFile('Reports')
        .setTitle('Reports')
        .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);

    case 'analytics':
      return HtmlService.createHtmlOutputFromFile('Analytics')
        .setTitle('Analytics')
        .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);

    case 'settings':
      return HtmlService.createHtmlOutputFromFile('Settings')
        .setTitle('Settings')
        .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);

    case 'help':
      return HtmlService.createHtmlOutputFromFile('Help')
        .setTitle('Help')
        .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);

    // Add more pages here as needed

    default:
      // 404 - Page not found
      return HtmlService.createHtmlOutput(
        '<html><body style="background:#000;color:#0f0;font-family:\'Courier New\';padding:40px;text-align:center;">' +
        '<h1>404 - PAGE NOT FOUND</h1>' +
        '<p>The page "' + pageName + '" does not exist.</p>' +
        '<p><a href="?mode=master" style="color:#0f0;">← Return to Dashboard</a></p>' +
        '</body></html>'
      ).setTitle('404 - Not Found');
  }
}

/**
 * Configuration object - customize these values for your project
 */
const CONFIG = {
  SHEET_NAME: 'FRC',  // Sheet containing zip code data
  ZIP_COLUMN: 6,      // Column F (1-indexed)
  TARGET_ZIP: '64110',
  TARGET_ADDRESS: '5317 Charlotte St, Kansas City, MO 64110',
  TARGET_DISPLAY_NAME: '5317 Charlotte',
  GEOCODE_DELAY_MS: 100
};

/**
 * Get rolling intro text for the map display
 * EDIT THIS TEXT TO CHANGE THE ROLLING MESSAGE
 */
function getIntroText() {
  return "INPUT TEXT HERE";
}

/**
 * Get zip codes from the FRC sheet, Column F
 * @returns {Object} Object with zip codes as keys and counts as values
 */
function getZipCodesFromSheet() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName(CONFIG.SHEET_NAME);

    if (!sheet) {
      throw new Error('Sheet "' + CONFIG.SHEET_NAME + '" not found');
    }

    const lastRow = sheet.getLastRow();

    if (lastRow < 2) {
      return {};
    }

    const zipRange = sheet.getRange(2, CONFIG.ZIP_COLUMN, lastRow - 1, 1);
    const zipValues = zipRange.getValues();

    // Count occurrences of each zip code
    const zipCounts = {};
    zipValues.forEach(row => {
      const zip = String(row[0]).trim();
      if (zip && zip !== '' && zip.length === 5) {
        zipCounts[zip] = (zipCounts[zip] || 0) + 1;
      }
    });

    return zipCounts;

  } catch (error) {
    Logger.log('Error in getZipCodesFromSheet: ' + error.toString());
    throw error; // Re-throw to be caught by caller
  }
}

/**
 * Geocode a specific address
 * @param {string} address - Full address to geocode
 * @returns {Object|null} Coordinates object or null if failed
 */
function getAddressCoordinates(address) {
  try {
    const geocoder = Maps.newGeocoder();
    const location = geocoder.geocode(address);

    if (location.status === 'OK' && location.results.length > 0) {
      const result = location.results[0];
      return {
        lat: result.geometry.location.lat,
        lng: result.geometry.location.lng
      };
    }
    return null;
  } catch (error) {
    Logger.log('Error geocoding address: ' + error.toString());
    return null;
  }
}

/**
 * Geocode a zip code
 * @param {string} zipCode - 5-digit zip code
 * @returns {Object|null} Coordinates object with zip or null if failed
 */
function getZipCodeCoordinates(zipCode) {
  try {
    const geocoder = Maps.newGeocoder();
    const location = geocoder.geocode(zipCode + ', USA');

    if (location.status === 'OK' && location.results.length > 0) {
      const result = location.results[0];
      return {
        lat: result.geometry.location.lat,
        lng: result.geometry.location.lng,
        zip: zipCode
      };
    }
    return null;
  } catch (error) {
    Logger.log('Error geocoding ' + zipCode + ': ' + error.toString());
    return null;
  }
}

/**
 * Main function to get all zip data for map display
 * @returns {Object} Complete data package with target and zip information
 */
function getAllZipData() {
  try {
    const zipCounts = getZipCodesFromSheet();

    if (Object.keys(zipCounts).length === 0) {
      return {
        error: 'No zip codes found in Sheet "' + CONFIG.SHEET_NAME + '", Column F'
      };
    }

    const targetCount = zipCounts[CONFIG.TARGET_ZIP] || 0;

    // Geocode the specific address
    const targetCoords = getAddressCoordinates(CONFIG.TARGET_ADDRESS);
    if (!targetCoords) {
      return { error: 'Could not geocode target address: ' + CONFIG.TARGET_ADDRESS };
    }

    const target = {
      lat: targetCoords.lat,
      lng: targetCoords.lng,
      zip: CONFIG.TARGET_ZIP,
      count: targetCount,
      displayName: CONFIG.TARGET_DISPLAY_NAME
    };

    const allZips = [];
    let totalRespondents = 0;

    Object.keys(zipCounts).forEach(zip => {
      totalRespondents += zipCounts[zip];

      if (zip !== CONFIG.TARGET_ZIP) {
        const coord = getZipCodeCoordinates(zip);
        if (coord) {
          coord.count = zipCounts[zip];
          allZips.push(coord);
        }
        Utilities.sleep(CONFIG.GEOCODE_DELAY_MS);
      }
    });

    return {
      target: target,
      zips: allZips,
      totalCount: Object.keys(zipCounts).length,
      totalRespondents: totalRespondents
    };

  } catch (error) {
    Logger.log('Error in getAllZipData: ' + error.toString());
    return {
      error: 'Failed to load data: ' + error.toString()
    };
  }
}

/**
 * Get configuration values (for frontend use if needed)
 * @returns {Object} Configuration object
 */
function getConfig() {
  return {
    sheetName: CONFIG.SHEET_NAME,
    targetZip: CONFIG.TARGET_ZIP,
    targetAddress: CONFIG.TARGET_ADDRESS,
    targetDisplayName: CONFIG.TARGET_DISPLAY_NAME
  };
}

/**
 * Test function to verify router
 * Run this in Apps Script editor to test
 */
function testRouter() {
  Logger.log('Testing router...');

  // Test 1: No parameters
  const test1 = doGet({});
  Logger.log('Test 1 (no params): ' + test1.getTitle());

  // Test 2: Master mode
  const test2 = doGet({ parameter: { mode: 'master' } });
  Logger.log('Test 2 (master mode): ' + test2.getTitle());

  // Test 3: Display mode
  const test3 = doGet({ parameter: { mode: 'display' } });
  Logger.log('Test 3 (display mode): ' + test3.getTitle());

  // Test 4: Direct page
  const test4 = doGet({ parameter: { page: 'MD' } });
  Logger.log('Test 4 (direct page): ' + test4.getTitle());

  // Test 5: Master with page
  const test5 = doGet({ parameter: { mode: 'master', page: 'MD' } });
  Logger.log('Test 5 (master with page): ' + test5.getTitle());

  Logger.log('Router tests complete!');
}
